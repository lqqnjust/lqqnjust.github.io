<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>kafka学习（一）</title>
    <link href="/2020/09/25/kafka%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2020/09/25/kafka%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="流处理平台特性"><a href="#流处理平台特性" class="headerlink" title="流处理平台特性"></a>流处理平台特性</h1><ul><li>可以发布（write）和订阅（read）事件流，包括持续的从其他系统导入、导出数据。</li><li>可以存储流式记录，并且有较好的容错性。</li><li>可以在流式数据产生时就处理</li></ul><h1 id="kafka适用场景"><a href="#kafka适用场景" class="headerlink" title="kafka适用场景"></a>kafka适用场景</h1><ul><li>构造实时数据流管道，可以在系统或者应用之间可靠的获取数据。（消息队列）</li><li>构建实时流式应用程序，对这些流数据进行转换或者影响。（流处理，通过kafka stream topic和topic之间内部进行变化）</li></ul><h1 id="kafka特性"><a href="#kafka特性" class="headerlink" title="kafka特性"></a>kafka特性</h1><ul><li>kafka作为集群，运行在一台或者多台服务器上</li><li>通过topic对存储的流数据进行分类</li><li>每条记录中包含一个key，一个value和一个timstamp</li></ul><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><ul><li>Admin API管理和检查topics，brokers和其他kafka对象。</li><li>Producer API允许一个应用发布以传流式的数据到一个或者多个topic中</li><li>Consumer API允许一个应用订阅一个或者多个topic，并且对发布给他们的流式数据处理</li><li>Stream API允许一个应用程序作为一个流处理器，消费一个或者多个topic产生的输入流，然后生产一个输出流到一个或者多个topic中取，在输入输出流中进行有效的转换</li><li>Connector API允许构建并且运行可重用的生产者消费者，将kafka topics连接到已经存在的应用程序或者数据系统。比如，连接到一个关系型数据库，捕捉表的所有变更内容。</li></ul><h1 id="Topics和日志"><a href="#Topics和日志" class="headerlink" title="Topics和日志"></a>Topics和日志</h1><p>Topic就是数据主题，是数据记录发布的地方，可以用来区分业务系统。Topics是多订阅者模式，一个topic可以拥有一个或者多个消费者来订阅它的数据。</p><p>每一个topic，集群为维持一个分区日志，如下图：<br><img src="https://kafka.apachecn.org/10/images/log_anatomy.png"></p><p>每个分区都是有序且顺序不可变的记录集，并且不断地追加到结构化的commit log文件。分区中每一个记录都会分配一个id号来表示顺序，称之为offset。offset用来唯一标识分区中的每一条记录。</p><p>kafka集群保留所有发布的记录，无论他们是否已经被消费掉，并且通过一个可配置的参数：保留期限 来控制。kafka的性能和数据大小无关。</p><p><img src="https://kafka.apachecn.org/10/images/log_consumer.png"></p><p>在每个消费中唯一保存的元数据是offset，即消费在log中的位置。偏移量是由消费者控制，通常在读取记录后，消费者会以线性的方式增加偏移量。但在实际中，由于这个位置由消费者控制，所以消费者可以通过任何顺序来消费记录。</p><h1 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h1><p>日志的分区partition在kafka集群的服务器上。每个服务器在处理数据和请求时，共享这些分区。每一个分区都会在已配置的服务器上进行备份，确保容错性。</p><p>每个分区都有一台server作为leader。leader server处理一切对partition的读写请求，而follower只需被动的同步leader的数据。当leader宕机了，followers中的一台服务器会自动成为新的leader。每台server都会成为某些分区的leader和某些分区的follower。</p><h1 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h1><p>生产者发布数据到所选择的topic中。生产者负责将记录分配到topic的哪一个分区中。可以使用循环的方式来简单的实现负载均衡，也可以根据某些语义分区函数来完成。</p><h1 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h1><p>消费者使用一个<code>消费组</code>名称来进行标识。发布到topic中的每条记录被分配给订阅消费组中的一个消费者实例。消费者实例可以分布在多个进程中或者多个机器上。<br>如果所有的消费者实例在同一个消费组，消息记录会负载平衡到每一个消费者实例。<br>如果所有的消费者实例在不同的消费组中，每条消息记录会广播到所有的消费者进程。</p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/09/24/hello-world/"/>
    <url>/2020/09/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
